Plan: 
Use phones connected to strava to track each roll for each driver
have push captains take pusher data and send to me 
after rolls, upload the strava and pusher data to the interface
get the splits for each pusher
somehow create a library for the push capitans to look at where they can sort by pusher division/hill times

UI needs:
probably a pusher library

what i need to research:
- DATA STRUCTURES
    - each pusher is a dictionary with the keys as hills, and a list of sets with date and time? 
    - can dictionaries have properties? this could be 
    - pusher class
    - name <- object
    - division <- property
    - hill times <- each hill is its own property, and they are a set of sets of {time, date, roll #}
        - can I do this? I should know that <- i think i can as long as i dont try to mutate them
- I can just use that site for gpx -> txt, but it might be fun to figure out how to read it myself
- also how do I get data to save
    - pickling im pretty sure, but where does the data actually save? aka how does it work
- github?
    - if i do this in github, can all of the data be saved in a txt file for the classes?
    - wait i figured out the inital part of github lets goooooooo
- other python graphics packages
    - tkinter
- how to actually get pip working
    - i have created a virtual enviorment whatever that means *confusion*

current plan:
- use the site for gpx -> txt 
    - https://www.gpsvisualizer.com/convert_input
    - ith it might be better to be a csv file, just because splitting on commas sounds easier
    - also these are all strings, which should be interesting
    - might look into other modules to read them?
- figure out how to read the txt file
    - done with pandas
- drawing lines for gps
    - done by hand selecting the gps coordinates in google maps, and then feeding them into a dictionary and using polygon drawings
- I want to use a graphics package that is not cmu_graphics
    - tkinter seems to be great because i dont have to code the buttons 
    - also tkintermapview is awesome


backend: upload txt file -> assign it to the driver, pushers, day -> code reads it, finds the splits -> code saves pusher splits and data
frontend: driver mode -> get all lines on a map, be able to see speed for each line (this will be second)
        push captain mode -> be able to look for hill times, freeroll times, sort hill times by division,
            - there will need to be pusher profiles (name, division), can this be done in an excel sheet? it might be easier

possible issues:
- this runs on our cellphones, so maybe we get the drivers to have thier own strava on thier phones that I can connect to mine?
    - katrina without zello all rolls is unideal

- can strava take multiple sessions at the same time? 
    - maybe then each driver has an account that is on their phone and my computer <- ith this is the solution

- where are the drivers going to put the phones?
    - brooklyn had it in her sleeve, i'm not sure that was comfortable
    - gaff tape in the nose?
    - taping them to the backs of the harnesses?
    - this might just be a personal preference

- im assuming that gps signals will not be great inside the buggies, so the receptors will have to be outside
    - i dont want to ask people to have their cellphones attached to fast buggies, that seems bad
    - so the garmins might be the answer
    - garmins -> strava -> gpx -> csv
    - will bluetooth hold that far away?

- how is the pusher data input going to look? 
    - initially an excel file with name and division
    - could edit the txt files to include the pusher names at the top <- this might be the most coherernt
    - alright im now thinking some type of input screen with buttons which create a dictionary which will be input with the creation of
        each roll object

- also I should get new mechs involved
    - @Liam @Kayley

(this then turned into an issue log)

- the pandas reading csv did not include the seconds for time
    - ended up changing back to reading a txt file, it just worked easier, but am still using pandas. also used %H:%M:%S which helped

- how to do the actual timing line crossing algoritum
    - create lines between two points of the outer bounds of the transition zone lines
    - then run through the entire roll
        - put the gps coordinates into the next transition zone line up, and if it is within a certian threshold, take it 
            - orignially ran by taking the latitude and checking the line created by the next transition zone at that latitude, and
                determining if that was under threshold as delta to the actual value
            - this did not work
            - distance from line might be a better option 
                - this would be hard to implement and probaby throw transitions early
            - instead check the distace from the gps point to each of the transition zone points, and find when both are within 
                the threshold
                - I then tried this, and it ended up if either point is within threshold, the point and distances get added to a "close
                    points" dictionary. Then I find the best point out of the close points and use that
        - then store time and move on to next transition zone line
        - then take the base time and calculate splits based on it
            - this was done with the datetime module, and the start time holds the start, finish holds whole roll, all other times hold 
                the elapsed time of the segment

- i want to have each of the pusher names as the object for the pusher class, but this is proving to be an issue
    - with double names and last initials, it might be more feasable to assign each of them a code, but there might be a way around it
    - answer: i used a dictionary where the keys are the names and the values are the pusher objects, use allPushers['name'].property
        to access the properties of the pushers

- also will probably need a pusher edit feature

- is there an easy way to add all of our existing pushers in?
    - ith the current way of loading pushers works out fine, and is relitivly intuitve
    - i need to work on the edit feature for the pushers

- all of the rolls are stored on in a set, because they don't necesarily need names 
    - this might change later on
    - this did change, it is now a dictionary with tags

- i need to get more data  
    - some of this should be on the garmins -> tommorow problem

- each roll has the tag of date-driverInitials-first3LettersOfBuggy-roll# and is stored in allRolls
- allRolls is the master dictionary, with its keys being dates. these values are subdictionaries with the driver name as keys, and the values
    are dictionaries with the tags as keys to the roll objects

- there should be a feature where two rolls cannot be the same

- also there should be more thought in assigning pushers to rolls 
    - ie when there is no hill 1, and iron man, ect